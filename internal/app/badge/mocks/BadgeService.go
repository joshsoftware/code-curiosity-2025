// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	badge "github.com/joshsoftware/code-curiosity-2025/internal/app/badge"

	mock "github.com/stretchr/testify/mock"
)

// BadgeService is an autogenerated mock type for the BadgeService type
type BadgeService struct {
	mock.Mock
}

// GetBadgeDetailsOfUser provides a mock function with given fields: ctx, userId
func (_m *BadgeService) GetBadgeDetailsOfUser(ctx context.Context, userId int) ([]badge.Badge, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetBadgeDetailsOfUser")
	}

	var r0 []badge.Badge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]badge.Badge, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []badge.Badge); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]badge.Badge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBadgeService creates a new instance of BadgeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBadgeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BadgeService {
	mock := &BadgeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
